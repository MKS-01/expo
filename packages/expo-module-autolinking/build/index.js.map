{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAC1B,4DAA+B;AAC/B,0DAA6B;AAC7B,sDAA6B;AAC7B,4CAAoB;AACpB,4CAAoB;AACpB,gDAAwB;AACxB,oDAA4B;AAIrB,KAAK,UAAU,uBAAuB,CAC3C,WAAqB,EACrB,GAAW;IAEX,OAAO,WAAW,CAAC,MAAM,GAAG,CAAC;QAC3B,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,cAAI,CAAC,OAAO,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QAC9D,CAAC,CAAC,MAAM,qBAAqB,CAAC,GAAG,CAAC,CAAC;AACvC,CAAC;AAPD,0DAOC;AAED;;GAEG;AACI,KAAK,UAAU,qBAAqB,CAAC,GAAW;IACrD,MAAM,KAAK,GAAG,EAAE,CAAC;IACjB,IAAI,GAAG,GAAG,GAAG,CAAC;IACd,IAAI,WAA+B,CAAC;IAEpC,OAAO,CAAC,WAAW,GAAG,MAAM,iBAAM,CAAC,cAAc,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE;QACjE,GAAG,GAAG,cAAI,CAAC,OAAO,CAAC,cAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;QAC9C,KAAK,CAAC,IAAI,CAAC,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC;KAC1D;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAVD,sDAUC;AAEM,KAAK,UAAU,qBAAqB,CACzC,MAA+B;IAE/B,MAAM,gBAAgB,GAAqC,EAAE,CAAC;IAC9D,MAAM,OAAO,GAA6B,EAAE,CAAC;IAE7C,KAAK,MAAM,UAAU,IAAI,MAAM,CAAC,KAAK,EAAE;QACrC,MAAM,KAAK,GAAG,MAAM,mBAAI,CAAC,mBAAmB,EAAE;YAC5C,GAAG,EAAE,UAAU;SAChB,CAAC,CAAC;QAEH,KAAK,MAAM,gBAAgB,IAAI,KAAK,EAAE;YACpC,MAAM,UAAU,GAAG,YAAE,CAAC,YAAY,CAAC,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,cAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAC1F,yEAAyE;YACzE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC;YAEzE,MAAM,cAAc,GAAmB;gBACrC,IAAI,EAAE,UAAU;gBAChB,OAAO;aACR,CAAC;YACF,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE;gBAC3B,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;aAC3C;iBAAM,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,UAAU,CAAC,EAAE;gBACjF,gBAAgB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;aAC7C;SACF;KACF;IAED,8EAA8E;IAC9E,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,UAAU,EAAE,SAAS,CAAC,EAAE,EAAE;QACvE,kEAAkE;QAClE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,gBAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAChE,MAAM,YAAY,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;QAEvC,IAAI,YAAY,EAAE;YAChB,GAAG,CAAC,UAAU,CAAC,GAAG;gBAChB,GAAG,YAAY;gBACf,UAAU,EAAE,SAAS;aACtB,CAAC;SACH;QACD,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,OAAO,CAAC,CAAC;IAEZ,OAAO,OAAO,CAAC;AACjB,CAAC;AA5CD,sDA4CC;AAED,SAAgB,eAAe,CAAC,aAAuC;IACrE,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;IAC1B,MAAM,YAAY,GAAuC,CAAC,CAAC,EAAE,CAAC,cAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;IACzF,MAAM,MAAM,GAAkB,EAAE,CAAC;IAEjC,KAAK,MAAM,UAAU,IAAI,aAAa,EAAE;QACtC,MAAM,YAAY,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC;QAE/C,IAAI,YAAY,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YACtC,MAAM,KAAK,GAAG,IAAI,oBAAK,EAAE,CAAC;YAE1B,KAAK,CAAC,IAAI,CACR,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,MAAM,eAAK,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC,EAC1D,CAAC,eAAK,CAAC,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,EAAE,eAAK,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,EAC7E,GAAG,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC;gBAC1C,eAAK,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;gBACnC,eAAK,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;aAC9B,CAAC,CACH,CAAC;YACF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACpB;KACF;IACD,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QACrB,OAAO;YACL,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YACxC,eAAK,CAAC,MAAM,CACV,aAAa,MAAM,CAAC,MAAM,yEAAyE,CACpG;YACD,eAAK,CAAC,MAAM,CACV,mHAAmH,CACpH;SACF,CAAC,IAAI,CAAC,YAAE,CAAC,GAAG,CAAC,CAAC;KAChB;IACD,OAAO,EAAE,CAAC;AACZ,CAAC;AAlCD,0CAkCC;AAEM,KAAK,UAAU,mBAAmB,CACvC,QAAgB,EAChB,aAAuC;IAEvC,MAAM,eAAe,GAAG,OAAO,CAAC,eAAe,QAAQ,EAAE,CAAC,CAAC;IAE3D,OAAO,CACL,MAAM,OAAO,CAAC,GAAG,CACf,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAE,EAAE,CAC3D,eAAe,CAAC,kBAAkB,CAAC,UAAU,EAAE,QAAQ,CAAC,CACzD,CACF,CACF,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACpB,CAAC;AAbD,kDAaC;AAED,qCAAqC;AACrC,gGAAgG;AAChG,mFAAmF;AAEnF,oDAAoD;AACpD,mEAAmE;AACnE,qDAAqD;AACrD,2DAA2D;AAC3D,gEAAgE;AAEhE,uGAAuG;AACvG,mEAAmE;AACnE,kEAAkE;AAClE,wEAAwE;AAExE,wDAAwD;AACxD,kGAAkG;AAClG,wDAAwD;AAExD,wCAAwC;AACxC,uDAAuD;AACvD,gBAAgB;AAEhB,wIAAwI;AACxI,2CAA2C;AAC3C,oCAAoC;AACpC,sCAAsC;AACtC,4CAA4C;AAC5C,0CAA0C;AAC1C,+BAA+B;AAC/B,gBAAgB;AAChB,gBAAgB;AAChB,cAAc;AACd,YAAY;AACZ,QAAQ;AACR,MAAM","sourcesContent":["import chalk from 'chalk';\nimport Table from 'cli-table3';\nimport glob from 'fast-glob';\nimport findUp from 'find-up';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport semver from 'semver';\n\nimport { AutolinkingSearchConfig, AutolinkingSearchResults, ModuleRevision } from './types';\n\nexport async function resolveLookupPathsAsync(\n  lookupPaths: string[],\n  cwd: string\n): Promise<string[]> {\n  return lookupPaths.length > 0\n    ? lookupPaths.map(lookupPath => path.resolve(cwd, lookupPath))\n    : await findDefaultPathsAsync(cwd);\n}\n\n/**\n * Looks up for workspace's `node_modules` paths.\n */\nexport async function findDefaultPathsAsync(cwd: string): Promise<string[]> {\n  const paths = [];\n  let dir = cwd;\n  let pkgJsonPath: string | undefined;\n\n  while ((pkgJsonPath = await findUp('package.json', { cwd: dir }))) {\n    dir = path.dirname(path.dirname(pkgJsonPath));\n    paths.push(path.join(pkgJsonPath, '..', 'node_modules'));\n  }\n  return paths;\n}\n\nexport async function searchForModulesAsync(\n  config: AutolinkingSearchConfig\n): Promise<AutolinkingSearchResults> {\n  const modulesRevisions: Record<string, ModuleRevision[]> = {};\n  const results: AutolinkingSearchResults = {};\n\n  for (const searchPath of config.paths) {\n    const paths = await glob('**/unimodule.json', {\n      cwd: searchPath,\n    });\n\n    for (const moduleConfigPath of paths) {\n      const modulePath = fs.realpathSync(path.join(searchPath, path.dirname(moduleConfigPath)));\n      // const moduleConfig = require(path.join(modulePath, 'unimodule.json'));\n      const { name, version } = require(path.join(modulePath, 'package.json'));\n\n      const moduleRevision: ModuleRevision = {\n        path: modulePath,\n        version,\n      };\n      if (!modulesRevisions[name]) {\n        modulesRevisions[name] = [moduleRevision];\n      } else if (modulesRevisions[name].every(revision => revision.path !== modulePath)) {\n        modulesRevisions[name].push(moduleRevision);\n      }\n    }\n  }\n\n  // Resolve revisions to the main one (greatest version number) and duplicates.\n  Object.entries(modulesRevisions).reduce((acc, [moduleName, revisions]) => {\n    // Sort in place from greatest to least and pull the greatest one.\n    revisions.sort((a, b) => semver.rcompare(a.version, b.version));\n    const mainRevision = revisions.shift();\n\n    if (mainRevision) {\n      acc[moduleName] = {\n        ...mainRevision,\n        duplicates: revisions,\n      };\n    }\n    return acc;\n  }, results);\n\n  return results;\n}\n\nexport function printDuplicates(searchResults: AutolinkingSearchResults): string {\n  const cwd = process.cwd();\n  const relativePath: (module: ModuleRevision) => string = m => path.relative(cwd, m.path);\n  const tables: Table.Table[] = [];\n\n  for (const moduleName in searchResults) {\n    const moduleResult = searchResults[moduleName];\n\n    if (moduleResult.duplicates.length > 0) {\n      const table = new Table();\n\n      table.push(\n        [{ colSpan: 2, content: `üì¶ ${chalk.green(moduleName)}` }],\n        [chalk.magenta(relativePath(moduleResult)), chalk.cyan(moduleResult.version)],\n        ...moduleResult.duplicates.map(duplicate => [\n          chalk.gray(relativePath(duplicate)),\n          chalk.gray(duplicate.version),\n        ])\n      );\n      tables.push(table);\n    }\n  }\n  if (tables.length > 0) {\n    return [\n      ...tables.map(table => table.toString()),\n      chalk.yellow(\n        `‚ö†Ô∏è  Found ${tables.length} duplicated modules, but only the greatest versions will be autolinked.`\n      ),\n      chalk.yellow(\n        'Make sure to get rid of unnecessary versions as it may introduce side effects, especially on the JavaScript side.'\n      ),\n    ].join(os.EOL);\n  }\n  return '';\n}\n\nexport async function resolveModulesAsync(\n  platform: string,\n  searchResults: AutolinkingSearchResults\n): Promise<any[]> {\n  const platformLinking = require(`./resolvers/${platform}`);\n\n  return (\n    await Promise.all(\n      Object.entries(searchResults).map(([moduleName, revision]) =>\n        platformLinking.resolveModuleAsync(moduleName, revision)\n      )\n    )\n  ).filter(Boolean);\n}\n\n// modules_paths.each { |module_path|\n//     canonical_module_path = Pathname.new(File.join(project_directory, module_path)).cleanpath\n//     glob_pattern = File.join(canonical_module_path, '**/*/**', 'unimodule.json')\n\n//     Dir.glob(glob_pattern) { |module_config_path|\n//       unimodule_json = JSON.parse(File.read(module_config_path))\n//       directory = File.dirname(module_config_path)\n//       platforms = unimodule_json['platforms'] || ['ios']\n//       targets = unimodule_json['targets'] || ['react-native']\n\n//       if unimodule_supports_platform(platforms, 'ios') && unimodule_supports_target(targets, target)\n//         package_json_path = File.join(directory, 'package.json')\n//         package_json = JSON.parse(File.read(package_json_path))\n//         package_name = unimodule_json['name'] || package_json['name']\n\n//         if !modules_to_exclude.include?(package_name)\n//           unimodule_config = { 'subdirectory' => 'ios' }.merge(unimodule_json.fetch('ios', {}))\n//           unimodule_version = package_json['version']\n\n//           if unimodules[package_name]\n//             unimodules_duplicates.push(package_name)\n//           end\n\n//           if !unimodules[package_name] || Gem::Version.new(unimodule_version) >= Gem::Version.new(unimodules[package_name][:version])\n//             unimodules[package_name] = {\n//               name: package_name,\n//               directory: directory,\n//               version: unimodule_version,\n//               config: unimodule_config,\n//               warned: false,\n//             }\n//           end\n//         end\n//       end\n//     }\n//   }\n"]}